/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codificacionhuffman;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.math.BigDecimal;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Daniel
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setTitle("Compresion De Datos");
        //Imagen img1 = new Imagen("/Imagenes/fondo1.jfif", 670, 810);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCompresion = new javax.swing.JLabel();
        jScrollPaneCompresion = new javax.swing.JScrollPane();
        Area_texto = new javax.swing.JTextArea();
        jScrollPaneDescomprimir = new javax.swing.JScrollPane();
        Area_texto2 = new javax.swing.JTextArea();
        jLabelDescomprimir = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabelComprimir = new javax.swing.JLabel();
        Comprimir = new javax.swing.JButton();
        jLabelDescomprimir1 = new javax.swing.JLabel();
        Descomprimir = new javax.swing.JButton();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelCompresion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelCompresion.setForeground(new java.awt.Color(255, 255, 255));
        jLabelCompresion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCompresion.setText("Area de Compresion");
        getContentPane().add(jLabelCompresion, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 330, -1));

        Area_texto.setColumns(20);
        Area_texto.setRows(5);
        jScrollPaneCompresion.setViewportView(Area_texto);

        getContentPane().add(jScrollPaneCompresion, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 330, 440));

        Area_texto2.setColumns(20);
        Area_texto2.setRows(5);
        jScrollPaneDescomprimir.setViewportView(Area_texto2);

        getContentPane().add(jScrollPaneDescomprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 330, 440));

        jLabelDescomprimir.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelDescomprimir.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDescomprimir.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDescomprimir.setText("Area de Descomprimir");
        getContentPane().add(jLabelDescomprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 330, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Codigo Huffman");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        jLabelComprimir.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelComprimir.setForeground(new java.awt.Color(255, 255, 255));
        jLabelComprimir.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelComprimir.setText("Comprimir");
        getContentPane().add(jLabelComprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 110, -1, -1));

        Comprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/zip(2).png"))); // NOI18N
        Comprimir.setBorderPainted(false);
        Comprimir.setContentAreaFilled(false);
        Comprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprimirActionPerformed(evt);
            }
        });
        getContentPane().add(Comprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 130, 50, 70));

        jLabelDescomprimir1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelDescomprimir1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDescomprimir1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDescomprimir1.setText("Descomprimir");
        getContentPane().add(jLabelDescomprimir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 210, -1, -1));

        Descomprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/txt(2).png"))); // NOI18N
        Descomprimir.setBorderPainted(false);
        Descomprimir.setContentAreaFilled(false);
        Descomprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescomprimirActionPerformed(evt);
            }
        });
        getContentPane().add(Descomprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 230, 60, 70));

        Fondo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo9.jpeg"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComprimirActionPerformed
        Huffman compresion = new Huffman();
        Area_texto.setText("");
        String cadena_aux = "",cadena_binaria;
        int log_cadena, log_cadenaAscii, diferencia,porcentaje;
        File archivo;
        FileReader fr;
        BufferedReader br;
        long inicio = System.currentTimeMillis();
        String direccion = JOptionPane.showInputDialog(rootPane,"Ingrese la direccion del archivo: ");
        try {
            archivo = new File(direccion);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea;
            while((linea=br.readLine())!=null){
                cadena_aux+=linea;
            }
            JOptionPane.showMessageDialog(rootPane,"El archivo se pudo leer con exito");
            Area_texto.append("Contenido de TXT: "+cadena_aux);
            //JOptionPane.showMessageDialog(rootPane,"Ver lista de caracteres");
            Area_texto.append("\n\n***LISTA DE CARACTERES CON FRECUENCIA***");
            Area_texto.append("\n");
            compresion.CrearListaFrecuencias(cadena_aux);
            Area_texto.append(compresion.getLista().Mostrar());
           // JOptionPane.showMessageDialog(rootPane,"Ver lista de caracteres con clave binaria");
            
            compresion.CrearArbol();
            compresion.ClavesParaLetras();
            Area_texto.append("\n");
            Area_texto.append("\n***LISTA DE CARACTERES CON FRECUENCIA Y CLAVE BINARIA***\n");
            
            Area_texto.append(compresion.getLista().Mostrar());
            //JOptionPane.showMessageDialog(rootPane,"Ver cadena binaria");
            compresion.ClaveBinario();
            cadena_binaria = compresion.getCadena_binaria();
            Area_texto.append("\n\nCadena binaria: "+cadena_binaria);
            compresion.BinarioAascii(cadena_binaria);
            Area_texto.append("\n\n***CARACTER ASCII CON NUMERO ENTERO Y BINARIO***\n\n");
            Area_texto.append(compresion.getCadena_ascii_entero());
            
           // JOptionPane.showMessageDialog(rootPane,"Ver cadena Ascii y tabla");
            Area_texto.append("\n\nCadena Ascii: "+compresion.getCadenaAscii()+"\n");
            Area_texto.append("Tabla: "+compresion.getCadena_tabla());
            try {
            String direccion_tabla = JOptionPane.showInputDialog("Ingrese la direccion donde guardara la tabla");
            compresion.CrearArchivoTabla(direccion_tabla);
            
            String direccion_ascii = JOptionPane.showInputDialog("Ingrese direccion donde guardara la cadena Ascii");
            compresion.CrearArchivoCadebaAscii(direccion_ascii);
            JOptionPane.showMessageDialog(rootPane,"Los archivos se guardaron correctamente");
            } catch (Exception e) {
                 JOptionPane.showMessageDialog(rootPane,"Error al guardar los archivos","Error",JOptionPane.ERROR_MESSAGE);
            }
            Area_texto.append("\n\n Bytes de la cadena original: "+compresion.getCadena().length()+"\n");
            Area_texto.append("Bytes de la cadena Ascii: "+compresion.getCadenaAscii().length());
            log_cadena = compresion.getCadena().length();
            log_cadenaAscii = compresion.getCadenaAscii().length();
            diferencia = log_cadena - log_cadenaAscii;
            porcentaje = (diferencia*100)/log_cadena;
            Area_texto.append("\nPorcentaje de compresion: "+porcentaje+"%");
            long fin =  System.currentTimeMillis();
                BigDecimal inicio1 = new BigDecimal(inicio);
                BigDecimal fin1 = new BigDecimal(fin);
                BigDecimal mil = new BigDecimal(1000);
                fin1 = fin1.subtract(inicio1);
                fin1 = fin1.divide(mil);
                Area_texto.append("\nTiempo de compresion: "+fin1+" (s)");
                
           
        } catch (Exception e) {
            e.printStackTrace();
           JOptionPane.showMessageDialog(rootPane,"Hubo un problema","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ComprimirActionPerformed

    private void DescomprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescomprimirActionPerformed
        Huffman compresion = new Huffman();
        String cadena_ascii, cadena_tabla, direccion_ascii, direccion_tabla; 
        direccion_ascii = JOptionPane.showInputDialog("Ingrese la direccion de la cadean Ascii");
        direccion_tabla = JOptionPane.showInputDialog("Ingrese la direccion de la tabla");
        try {
            long inicio = System.currentTimeMillis();
            cadena_ascii = compresion.LeerArchivo(direccion_ascii);
            cadena_tabla = compresion.LeerArchivo(direccion_tabla);
            compresion.Descomprimir(cadena_ascii, cadena_tabla);
            Area_texto2.append("Cadena Ascii: "+cadena_ascii+"\n");
            Area_texto2.append("Tabla: "+cadena_tabla+"\n\n");
            Area_texto2.append("***DESCOMPRESION POR CARACTER***\n");
            Area_texto2.append(compresion.getTabla_descompresio()+"\n");
            Area_texto2.append("Cadena binaria: "+compresion.getCadena_binaria()+"\n");
            Area_texto2.append("Cadena Descomprimida: "+compresion.getCadena_des()+"\n");
           
            long fin =  System.currentTimeMillis();
            BigDecimal inicio1 = new BigDecimal(inicio);
            BigDecimal fin1 = new BigDecimal(fin);
            BigDecimal mil = new BigDecimal(1000);
            fin1 = fin1.subtract(inicio1);
            fin1 = fin1.divide(mil);
            Area_texto2.append("Tiempo de descompresion: "+fin1+" (s) ");
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,"Error al ejecutar","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DescomprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Area_texto;
    private javax.swing.JTextArea Area_texto2;
    private javax.swing.JButton Comprimir;
    private javax.swing.JButton Descomprimir;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCompresion;
    private javax.swing.JLabel jLabelComprimir;
    private javax.swing.JLabel jLabelDescomprimir;
    private javax.swing.JLabel jLabelDescomprimir1;
    private javax.swing.JScrollPane jScrollPaneCompresion;
    private javax.swing.JScrollPane jScrollPaneDescomprimir;
    // End of variables declaration//GEN-END:variables
}

